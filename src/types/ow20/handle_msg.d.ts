/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type HandleMsg =
  | {
      transfer: {
        amount: Uint128;
        recipient: HumanAddr;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      burn: {
        amount: Uint128;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      send: {
        amount: Uint128;
        contract: HumanAddr;
        msg?: Binary | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      mint: {
        amount: Uint128;
        recipient: HumanAddr;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      increase_allowance: {
        amount: Uint128;
        expires?: Expiration | null;
        spender: HumanAddr;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      decrease_allowance: {
        amount: Uint128;
        expires?: Expiration | null;
        spender: HumanAddr;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      transfer_from: {
        amount: Uint128;
        owner: HumanAddr;
        recipient: HumanAddr;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      send_from: {
        amount: Uint128;
        contract: HumanAddr;
        msg?: Binary | null;
        owner: HumanAddr;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      burn_from: {
        amount: Uint128;
        owner: HumanAddr;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
export type Uint128 = string;
export type HumanAddr = string;
/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.
 *
 * This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>
 */
export type Binary = string;
/**
 * Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)
 */
export type Expiration =
  | {
      at_height: number;
      [k: string]: unknown;
    }
  | {
      at_time: number;
      [k: string]: unknown;
    }
  | {
      never: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
